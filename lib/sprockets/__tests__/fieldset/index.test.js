"use strict";function _typeof(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof(obj);}var _react=_interopRequireDefault(require("react"));var _reactTestRenderer=_interopRequireDefault(require("react-test-renderer"));var _enzyme=_interopRequireWildcard(require("enzyme"));var _enzymeAdapterReact=_interopRequireDefault(require("enzyme-adapter-react-16"));var _classnames=_interopRequireDefault(require("classnames"));var _=_interopRequireDefault(require("../.."));var _fieldset=_interopRequireDefault(require("../../fieldset"));function _getRequireWildcardCache(){if(typeof WeakMap!=="function")return null;var cache=new WeakMap();_getRequireWildcardCache=function _getRequireWildcardCache(){return cache;};return cache;}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}if(obj===null||_typeof(obj)!=="object"&&typeof obj!=="function"){return{default:obj};}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}_enzyme.default.configure({adapter:new _enzymeAdapterReact.default()});jest.mock('classnames',function(){return jest.fn(function(){return'MOCK CLASSNAME';});});jest.mock("../../../components/title/fieldset");jest.mock("../../../components/group/fieldset");describe('shinkansen-sprockets/sprockets/fieldset',function(){describe('<Sprocket />',function(){describe('With required props',function(){var component=_react.default.createElement(_fieldset.default,null);it('renders',function(){return expect(_reactTestRenderer.default.create(component).toJSON()).toMatchSnapshot();});describe('`getClassName`',function(){it('is defined',function(){return expect(_fieldset.default.prototype.getClassName).toBeDefined();});});describe('`renderTitle`',function(){it('is defined',function(){return expect(_fieldset.default.prototype.renderTitle).toBeDefined();});});});describe('With additional props',function(){it('renders',function(){var component=_react.default.createElement(_fieldset.default,{title:"MOCK TITLE",onChange:jest.fn()});return expect(_reactTestRenderer.default.create(component).toJSON()).toMatchSnapshot();});});describe('`getClassName()`',function(){var returnValue;beforeEach(function(){jest.spyOn(_.default.prototype,'getClassName').mockReturnValue('MOCK GETCLASSNAME');var component=_react.default.createElement(_fieldset.default,null);var instance=(0,_enzyme.shallow)(component).instance();returnValue=instance.getClassName();});it('does not invoke `classnames`',function(){return expect(_classnames.default).toBeCalledWith('MOCK GETCLASSNAME',{error:false},'fieldset');});it('returns the classname',function(){return expect(returnValue).toBe('MOCK CLASSNAME');});});});});